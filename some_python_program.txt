# Program description goes here
# Updated on:
# Updated by:
#
#
# Document what the following lines of code do here
from tkinter import *

root = Tk()

root.title("Simple Calculator")

# Document what the following lines of code do here
e = Entry(root, width=35, borderwidth=5)
e.grid(row=0, column=0, columnspan=3, padx=10, pady=10)

# Document what the following lines of code do here
def button_click(number):
    current = e.get()
    e.delete(0, END)
    e.insert(0, str(current) + str(number))

# Document what the following lines of code do here
def button_clear():
    e.delete(0, END)

# Document what the following lines of code do here
def button_operator(operator):
    first_number = e.get()
    global f_num
    global num_operator
    f_num = int(first_number)
    num_operator = operator
    e.delete(0, END)

# Document what the following lines of code do here

# you might want to consider adding documentation on a line by line basis since
# this is a critical function for the program
def button_equal(): #creates a function
    second_number = e.get() # retrievs the second number that the user entered
    e.delete(0, END)  # clears the entry field to show the result
    if num_operator == '+':  # checks if selected operation is addtion
        e.insert(0, f_num + int(second_number))  # adds first entered number to second entered number and displays the result
    elif num_operator == '*':  # checks if selected operation is multiplication
        e.insert(0, f_num * int(second_number))  #  multiplies first entered number with second entered number and displays the result
    elif num_operator == '/': # checks if selected operation is addtion
        e.insert(0, f_num / int(second_number))  # divides first entered number to second entered number and displays the result
    elif num_operator == '-':  # checks if selected operation is addtion
        e.insert(0, f_num - int(second_number))  # subtracts first entered number from second entered number and displays the result
    else:
        e.insert(0, "Invalid!!!")  # if anything selected wrong it displays "Invalid"

# Document what the following lines of code do here
#
# NOTE: We did not cover Lambda functins in class. A Lambda Function 
# in Python programming is an anonymous function
# or a function having no name. It is a small and restricted function 
# having no more than one line. In the case below, the Lambda function code
# is calling the code/function button_click() with the numbers 0-9 as the 
# parameter. Just like a normal function, a Lambda function can have multiple
# arguments with one expression. 

button_1 =  Button(root, text="1", padx=40, pady=20, command=lambda: button_click(1))  
# creates the button for number 1 and associate it with the button_click function
# button_1 will display the number "1" on the calculator and call button_click(1) when pressed.

button_2 =  Button(root, text="2", padx=40, pady=20, command=lambda: button_click(2))  
# create the button for the number 2 and associate it with the button_click function 
# button_2 will display the number "2" and call button_click(2) when pressed

button_3 =  Button(root, text="3", padx=40, pady=20, command=lambda: button_click(3)) 
# create the button for the number 3 and associate it with the button_click function
# button_3 will display the number "3" and call button_click(3) when pressed

button_4 =  Button(root, text="4", padx=40, pady=20, command=lambda: button_click(4))
# create the button for the number 4 and associate it with the button_click function
# button_4 will display the number "4" and call button_click(4) when pressed

button_5 =  Button(root, text="5", padx=40, pady=20, command=lambda: button_click(5)) 
# Create the button for the number 5 and associate it with the button_click function
# button_5 will display the number "5" and call button_click(5) when pressed

button_6 =  Button(root, text="6", padx=40, pady=20, command=lambda: button_click(6))  
# create the button for the number 6 and associate it with the button_click function
# button_6 will display the number "6" and call button_click(6) when pressed

button_7 =  Button(root, text="7", padx=40, pady=20, command=lambda: button_click(7)) 
# create the button for the number 7 and associate it with the button_click function
# button_7 will display the number "7" and call button_click(7) when pressed

button_8 =  Button(root, text="8", padx=40, pady=20, command=lambda: button_click(8)) 
# create the button for the number 8 and associate it with the button_click function
# button_8 will display the number "8" and call button_click(8) when pressed

button_9 =  Button(root, text="9", padx=40, pady=20, command=lambda: button_click(9)) 
# create the button for the number 9 and associate it with the button_click function
# button_9 will display the number "9" and call button_click(9) when pressed

button_0 =  Button(root, text="0", padx=40, pady=20, command=lambda: button_click(0)) 
# create the button for the number 0 and associate it with the button_click function
# button_0 will display the number "0" and call button_click(0) when pressed

button_add =  Button(root, text="+", padx=39, pady=20, command=lambda: button_operator("+"))
# create the button for the addition operator and associate it with the button_operator function
# button_add will display the "+" symbol and call button_operator("+") when pressed

button_equal =  Button(root, text="   =   ", padx=79, pady=20, command=button_equal)
# create the button for the "equal" operator and associate it with the button_equal function
# button_equal will display the "=" symbol and call the button_equal function when pressed

button_clear =  Button(root, text="Clear", padx=79, pady=20, command=button_clear)
# create the button to clear the entry field and associate it with the button_clear function
# button_clear will display the word "Clear" and call the button_clear function when pressed



# Document what the following lines of code do here

# See the description of a Lambda function above
button_subtract =  Button(root, text="-", padx=40, pady=20, command=lambda: button_operator("-"))
# create the button for the subtraction operator and associate it with the button_operator function
# button_subtract will display the "-" symbol (for subtraction) on the screen and call button_operator("-") when pressed

button_multiply =  Button(root, text="*", padx=40, pady=20, command=lambda: button_operator("*"))
# create the button for the multiplication operator and associate it with the button_operator function
# button_multiply will display the "*" symbol (for multiplication) on the screen and call button_operator("*") when pressed

button_divide =  Button(root, text="/", padx=40, pady=20, command=lambda: button_operator("/"))
# create the button for the division operator and associate it with the button_operator function
# button_divide will display the "/" symbol (for division) on the screen and call button_operator("/") when pressed


# Document what the following lines of code do here

button_1.grid(row=3, column=0)
button_2.grid(row=3, column=1)
button_3.grid(row=3, column=2)

button_4.grid(row=2, column=0)
button_5.grid(row=2, column=1)
button_6.grid(row=2, column=2)

button_7.grid(row=1, column=0)
button_8.grid(row=1, column=1)
button_9.grid(row=1, column=2)

button_0.grid(row=4, column=0)
button_add.grid(row=5, column=0)
button_equal.grid(row=5, column=1, columnspan=2)
button_clear.grid(row=4, column=1, columnspan=2)

button_subtract.grid(row=6, column=0)
button_multiply.grid(row=6, column=1)
button_divide.grid(row=6, column=2)

# Document what the following line of code do here

root.mainloop()
